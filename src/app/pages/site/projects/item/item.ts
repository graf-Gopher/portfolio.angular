// Module imports
import { Component } from "@angular/core";
import { MatIconModule } from "@angular/material/icon";
import { AsyncPipe } from "@angular/common";
import { ActivatedRoute, RouterModule } from "@angular/router";
import { CoreService, DataLangPipe, LangPipe, SliderDirective } from "ngx-ute-core";

// Project imports
import { SiteHeader } from "@shared/site/header/header";
import { SiteFooter } from "@shared/site/footer/footer";
import { ProjectData, ProjectTagData, ProjectTechData } from "@interfaces/projects";

@Component({
    selector: "app-projects-item",
    standalone: true,
    imports: [SiteHeader, SiteFooter, MatIconModule, AsyncPipe, LangPipe, DataLangPipe, SliderDirective, RouterModule],
    templateUrl: "./item.html",
    styleUrl: "./item.scss",
})
export class ProjectsItemPage {
    public page: any = {};
    public itemData: ProjectData = {} as ProjectData;
    public tags: string = "";
    public teches: ProjectTechData[] = [];

    /**
     * Constructor of the ProjectsItemPage class.
     * Get the project data from the route resolver and initialize the component.
     *
     * @param coreService The core service, used to get the language and other useful informations.
     * @param activatedRoute The activated route, used to get the project data from the route resolver.
     * @param dataLangPipe The DataLangPipe, used to translate the project data.
     */
    constructor(public readonly coreService: CoreService, private activatedRoute: ActivatedRoute, private dataLangPipe: DataLangPipe) {
        this.init();
    }

    /**
     * Initialize the component with the project data.
     * The project data is loaded from the route resolver.
     * The pages data is loaded from the assets/data/pages.json file.
     * The tags are generated by translating the tag names and joining them with ", ".
     * The teches are generated by filtering the tech codes of the project with the tech codes of all the teches.
     */
    private async init() {
        const resolve = this.activatedRoute.snapshot.data["data"];
        this.itemData = resolve.item;
        const { pages, teches } = resolve.data;

        this.page = pages.project;

        this.tags = this.itemData.tags.map((tg: ProjectTagData) => this.dataLangPipe.transform(tg.name)).join(", ");

        this.teches = teches.filter((td: ProjectTechData) => this.itemData.tech.includes(td.code));
    }
}
